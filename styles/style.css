/* Здесь вы напишете основную часть стилей страницы.

Будьте внимательны! Для корректной работы скриптов на этом сайте нужно, чтобы в HTML некоторые классы были названы особым образом:
✦ like-icon — для svg-иконки анимированного сердца
✦ card__like-button — для кнопки Like рядом с иконкой
✦ card__icon-button — для кнопки, оборачивающей иконку
✦ card__icon-button — для кнопки, оборачивающей иконку
✦ is-liked — для обозначения состояния лайкнутой иконки в виде сердца
✦ button__text — для обозначения текстового элемента внутри кнопки

*/

.page {
  min-inline-size: clamp(320px, 100%, 1440px);
  min-block-size: 100dvb;
  color: var(--black-color, #000);
  font-family: var(--main-font), sans-serif;
  font-size: var(--main-text-size);
  font-variation-settings: 'wght' var(--font-normal);
  background-image: var(--background);                  
  background-position: center;
  background-attachment: fixed;
  background-repeat: no-repeat;
  background-size: cover;
}

.header {
  display: flex;
  flex-direction: column;
  margin-block-start: 100px;
  margin-block-end: 100px;
  margin-inline: auto;
  max-width: 700px;
  padding-block: 128px;
  background-color: var(--white-color, #fff);
  text-align: center;
  font-family: var(--accent-font), fantasy, sans-serif;
  text-transform: uppercase;
  border: 2px solid var(--black-color, #000);
}

@media (width <= 376px) {
  .header {
    padding-block: 120px;
  }
}

.logo {
  font-size: clamp(3.0625rem, 2.7104rem + 1.5023vw, 4.0625rem);
  display: block;
  padding-block-end: 20px;
}

.logo__title {
  font-size: clamp(0.875rem, 0.6769rem + 0.8451vw, 1.4375rem);
}

.section {
  max-width: 700px;
  margin-inline: auto;
  display: grid;
  gap: calc(var(--main-gap) * 2);
}

.card {
  background-color: var(--white-color, #fff);
  display: block;
  margin-inline: auto;
}

.card__title {
  font-size: var(--main-text-size, 18px);
  font-variation-settings: "wght" var(--font-bold, 700);
  padding: 5px 10px;
  border: 2px solid var(--black-color, #000);
}

@media (width <= 376px) {
  .card__title {
    padding: 3px 10px;
  }
}

.card__image {
  max-height: 696px;
  position: relative;
  overflow: hidden;
  border-inline: 2px solid var(--black-color, #000);
}

@media (width <= 376px) {
  .card__image {
    max-height: 375px;
  }
}

.image {
  inline-size: 100%;
  object-fit: cover;
  object-position: center;
}

.watermark {
  position: absolute;
  z-index: 2;
  font-family: var(--accent-font), fantasy;
  font-size: 14px;
  color: #000;
  opacity: 50%;
  background-blend-mode: hard-light;
  text-shadow:
    -1px 0 var(--white-color), 
    0 1px var(--white-color),  
    1px 0 var(--white-color), 
    0 -1px var(--white-color);
  top: var(--main-gap);
  right: var(--main-gap);
}

@media (width <= 376px) {
  .watermark {
    right: 15px;
  }
}

@supports (-webkit-text-stroke: 1px var(--white-color, #fff)) {
  .watermark {
    text-shadow: none;
    -webkit-text-stroke: 1px var(--white-color);
    text-stroke: 1px var(--white-color, #fff);
  }
}

.card__content {
  display: flex;
  flex-direction: column;
  gap: var(--main-gap);
  padding: var(--main-gap);
  border: 2px solid var(--black-color, #000);
  font-size: var(--main-text-size);
  font-variation-settings: 'wght' var(--font-normal, 400);
  line-height: 21px;
}

@media (width <= 376px) {
  .card__content {
    padding-inline: 27px;
  }
}

.card__buttons {
  display: flex;
  justify-content: flex-end;
  min-block-size: 39px;
  gap: 8px;
  padding-top: 2px;
}

.button {
  display: flex;
  align-items: center;
  justify-content: center;
  border: none;
  background-color: var(--white-color, #fff);
  outline: 2px solid var(--black-color, #000);
  font-family: var(--accent-font), sans-serif;
  overflow: hidden;
  position: relative;
  transition: box-shadow 0.5s;
  cursor: pointer;
}

.button:focus {
  border: none;
}

.button:focus-visible {
  box-shadow: 2px 2px 0px 2px var(--black-color, #000);
  outline: 2px solid var(--black-color, #000);
  color: var(--white-color, #fff);
}

.button::after {
  content: '';
  display: block;
  height: 100%;
  width: 100%;
  background-color: var(--black-color, #000);
  transition: transform 0.5s ease-in-out;
  transform: translateX(-100%);
  position: absolute;
  left: 0px;
  top: 0px;
}

.button:hover::after {
  cursor: pointer;
  transform: translateX(0);
}

.card__like-button {
  width: 130px;
  height: 36px;
}

@media (width <= 376px) {
  .card__like-button {
    width: 127px;
    height: 34px;
  }
}

.card__icon-button {
  display: flex;
  align-items: center;
  background-color: transparent;
  border: none;
  outline: 2px solid transparent;
  transition: color 0.3s ease;
  cursor: pointer;
  padding: 0;
}

@media (width <= 376px) {
  .card__icon-button {
    height: 33px;
  }
}

.card__icon-button:focus {
  border: none;
}

.card__icon-button:focus-visible {
  color: var(--black-color, #000);
  outline: 2px solid var(--black-color, #000);
}

.sparks {
  opacity: 0;
}

.like-icon:hover .main-body {
  fill: var(--black-color, #000);
  transition: fill 0.3s 0.05s linear;
}
  
.like-icon .main-body {
  fill: transparent;
  transition: fill 0.3s linear;
}
  
.like-icon .core {
  fill: transparent;
  transition: fill 0.3s linear;
}
  
.like-icon:hover .core {
  fill: var(--black-color, #000);
  transition: fill 0.3s linear;
}
  
.card__icon-button:active .core {
  fill: var(--heart-color, #ff0000);
  transition: fill 0.3s linear;
  transition-delay: 0.06s;
}
  
.like-icon:active .main-body {
  fill: var(--heart-color, #ff0000);
  transition: fill 0.3s linear;
  transition-delay: 0.05s;
}
  
.like-icon.is-liked .core {
  fill: var(--heart-color, #ff0000);
  transition: fill 0.3s linear;
}
  
.like-icon.is-liked .main-body {
  fill: var(--heart-color, #ff0000);
  transition: fill 0.3s 0.05s linear;
}
  
.like-icon.is-liked .contour {
  fill: var(--heart-color, #ff0000);
  transition: fill 0.3s 0.06s linear;
}
  
.like-icon.is-liked .heart {
  transform-origin: center;
  animation: scale 0.3s 0.1s ease-in;
}
  
.like-icon.is-liked .sparks {
  animation: sparks 0.3s ease-in 0.3s;
  fill: var(--heart-color);
}

.button__text {
  font-size: 14px;
  position: relative;
  z-index: 1;
  color: var(--white-color, #fff);
  mix-blend-mode: difference;
  cursor: pointer;
}

.dialog__button {
  gap: 8px;
  margin-block-start: 54px;
  margin-block-end: 100px;
  margin-inline: auto;
  width: 335px;
  padding-block: 15px;
  color: var(--white-color, #fff);
}

@media (width <= 376px) {
  .dialog__button {
    flex-direction: column;
    width: 306px;
  }
}

.floppy {
  width: 21px;
  height: auto;
  mix-blend-mode: difference;
  position: relative;
  z-index: 2;
  color: var(--white-color, #fff);
}

@media (width <= 376px) {
  .floppy {
    width: 28px;
  }
}

.modal-window::backdrop {
  background-color: rgb(0 0 0 / 0.75);
} 

.modal-window {
  background-color: var(--white-color, #fff);
  border: none;
  outline: 2px solid var(--black-color, #000);
  color: var(--black-color, #000);
  font-family: var(--accent-font), fantasy, sans-serif;
  text-transform: uppercase;
  font-size: 14px;
  line-height: 21px;
  padding: 0px;
}

@media (width <= 376px) {
  .modal-window {
    padding-inline: 9px;
  }
}

.modal-window_button {
  text-transform: uppercase;
  height: 38px;
  width: 293px;
  padding: 0px;
}

@media (width <= 376px) {
  .modal-window_button {
    width: 257px;
  }
}

.modal-window:is([open]) .modal-window_form {
  display: grid;
  gap: 30px;
}

@media (width <= 376px) {
  .modal-window:is([open]) .modal-window_form {
    row-gap: 30px;
  }
}

.modal-window:is([open]) .floppy {
  min-width: 39px;
  height: auto;
  margin-inline-end: 20px;
}

.modal-window_form {
  padding: 30px;
}

.modal-window_content {
  display: flex;
}

.modal-window_text {
  display: block;
  max-width: 200px;
}

.filter_brightness {
  filter: brightness(130%);
}

.filter_contrast {
  filter: contrast(55%);
}

.filter_blur {
  filter: blur(3px);
}

.filter_grayscale {
  filter: grayscale(1);
}

.filter_saturate {
  filter: saturate(200%);
}

.filter_hue-rotate {
  filter: hue-rotate(-70deg);
}

.filter_multiple {
  filter: sepia(0.6) contrast(55%) brightness(140%);
}

.filter_invert {
  filter: invert(90%);
}